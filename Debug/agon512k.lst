Zilog eZ80 Macro Assembler Version 4.3 (19073001)                                   27-Apr-23     16:59:35     page:   1


PC     Object              I  Line    Source 
                           A     1    ; File:		agon512k.asm
                           A     2    ; Purpose:	Use Agon 512KB external RAM in BASIC
                           A     3    ; Copyright (C) 2023 by Curtis Whitley
                           A     4    ;
                           A     5    ; MIT License
                           A     6    ;
                           A     7    ; Permission is hereby granted, free of charge, to any person obtaining a copy
                           A     8    ; of this software and associated documentation files (the "Software"), to deal
                           A     9    ; in the Software without restriction, including without limitation the rights
                           A    10    ; to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
                           A    11    ; copies of the Software, and to permit persons to whom the Software is
                           A    12    ; furnished to do so, subject to the following conditions:
                           A    13    ;
                           A    14    ; The above copyright notice and this permission notice shall be included in all
                           A    15    ; copies or substantial portions of the Software.
                           A    16    ;
                           A    17    ; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
                           A    18    ; IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
                           A    19    ; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
                           A    20    ; AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
                           A    21    ; LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
                           A    22    ; OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
                           A    23    ; SOFTWARE.
                           A    24    
                           A    25    
                           A    26    		XREF	emdV8, emdV16, emdV24, emdV32, emdVS
                           A    27    		XREF	emdSA, emdDA, emdAI, emdIS, emdRC
                           A    28    
                           A    29    		XDEF	empI, emfG8, emfG16, emfG24, emfG32, empGS, empGF
                           A    30    		XDEF	emfG8AI, emfG16AI, emfG24AI, emfG32AI, empGSAI, empGFAI
                           A    31    		XDEF	empP8, empP16, empP24, empP32, empPS, empPF
                           A    32    		XDEF	empP8AI, empP16AI, empP24AI, empP32AI, empPSAI, empPFAI
                           A    33    		XDEF	empCMBI, empCMBD, empXMB, empZMB
                           A    34    
                           A    35    		DEFINE	MY_DATA_SEG, SPACE=RAM, ORG=%4FB00
                           A    36    		SEGMENT	MY_DATA_SEG
                           A    37    		ALIGN	4
                           A    38    
                           A    39    		.ASSUME	ADL = 0
                           A    40    
                           A    41    ; These data values of various types are overlayed with each other.
04FB00                     A    42    emdV8:					; Value parameter as 8 bits
04FB00                     A    43    emdV16:					; Value parameter as 16 bits
04FB00                     A    44    emdV24:					; Value parameter as 24 bits
04FB00                     A    45    emdV32:					; Value parameter as 32 bits
04FB00                     A    46    emdVS:		ds		256	; Value parameter as string
                           A    47    
                           A    48    ; These parameters are all separate from each other.
04FC00                     A    49    emdSA:		ds		4	; Source address parameter
04FC04                     A    50    emdDA:		ds		4	; Destination address parameter
04FC08                     A    51    emdAI:		ds		4	; Array index parameter (range 0..65535)
04FC0C                     A    52    emdIS:		ds		4	; Array item size parameter (range 1..256)
04FC10                     A    53    emdRC:		ds		4	; Repeat count parameter
                           A    54    
                           A    55    
                           A    56    		DEFINE	MY_CODE_SEG, SPACE=ROM, ORG=%4FC14
                           A    57    		SEGMENT	MY_CODE_SEG
                           A    58    		ALIGN	4
                           A    59    
04FC14                     A    60    empI: ; Initialize upper RAM
                           A    61    ; Usage: CALL empI%
                           A    62    
04FC14 AF                  A    63    			xor		a
04FC15 5BDD2100 0005       A    64    			ld.lil	ix,50000H	; just past BASIC's RAM
04FC1B 0606                A    65    			ld		b,06H		; for range &50000 to &AFFFF
04FC1D 57                  A    66    			ld		d,a
04FC1E 5F                  A    67    			ld		e,a
04FC1F 5BDD7700            A    68    loop1:		ld.lil	(ix),a
04FC23 49DD23              A    69    			inc.l	ix
04FC26 1D                  A    70    			dec		e
04FC27 20 F6               A    71    			jr		nz,loop1
04FC29 15                  A    72    			dec		d
04FC2A 20 F3               A    73    			jr		nz,loop1
04FC2C 05                  A    74    			dec		b
04FC2D 20 F0               A    75    			jr		nz,loop1
04FC2F 5BDD2204 FC04       A    76    			ld.lil	(emdDA),ix
04FC35 C9                  A    77    			ret
                           A    78    
04FC36                     A    79    emfG8AI: ; Get 8-bit item from array
                           A    80    ; Usage: !emdSA% = arrayaddress: !emdAI% = array index: var%=USR(emfG8AI%) 
04FC36 5BCD AF FE 04       A    81    			call.lil	src_index8
04FC3B                     A    82    emfG8: ; Get 8-bit value
                           A    83    ; Usage: !emdSA% = sourceaddress: var%=USR(emfG8%)
04FC3B 5BDD2A00 FC04       A    84    			ld.lil	ix,(emdSA)
04FC41 5BDD6E00            A    85    			ld.lil	l,(ix)			; bits 7:0
04FC45 AF                  A    86    			xor		a				; clears A' & F' sign bits
04FC46 67                  A    87    			ld		h,a				; bits 15:8
04FC47 D9                  A    88    			exx
04FC48 AF                  A    89    			xor		a
04FC49 6F                  A    90    			ld		l,a				; bits 23:16
04FC4A 67                  A    91    			ld		h,a				; bits 31:24
04FC4B 4F                  A    92    			ld		c,a				; indicate integer result
04FC4C C9                  A    93    			ret
                           A    94    
04FC4D                     A    95    emfG16AI: ; Get 16-bit item from array
                           A    96    ; Usage: !emdSA% = arrayaddress: !emdAI% = array index: var%=USR(emfG16AI%) 
04FC4D 5BCD AA FE 04       A    97    			call.lil	src_index16
04FC52                     A    98    emfG16: ; Get 16-bit value
                           A    99    ; Usage: !emdSA% = sourceaddress: var%=USR(emfG16%)
04FC52 5BDD2A00 FC04       A   100    			ld.lil	ix,(emdSA)
04FC58 5BDD6E00            A   101    			ld.lil	l,(ix)			; bits 7:0
04FC5C 5BDD6601            A   102    			ld.lil	h,(ix+1)		; bits 15:8
04FC60 AF                  A   103    			xor		a				; clears A' & F' sign bits
04FC61 D9                  A   104    			exx
04FC62 AF                  A   105    			xor		a
04FC63 6F                  A   106    			ld		l,a				; bits 23:16
04FC64 67                  A   107    			ld		h,a				; bits 31:24
04FC65 4F                  A   108    			ld		c,a				; indicate integer result
04FC66 C9                  A   109    			ret
                           A   110    
04FC67                     A   111    emfG24AI: ; Get 24-bit item from array
                           A   112    ; Usage: !emdSA% = arrayaddress: !emdAI% = array index: var%=USR(emfG24AI%) 
04FC67 5BCD A5 FE 04       A   113    			call.lil	src_index24
04FC6C                     A   114    emfG24: ; Get 24-bit value
                           A   115    ; Usage: !emdSA% = sourceaddress: var%=USR(emfG24%)
04FC6C 5BDD2A00 FC04       A   116    			ld.lil	ix,(emdSA)
04FC72 5BDD6E00            A   117    			ld.lil	l,(ix)			; bits 7:0
04FC76 5BDD6601            A   118    			ld.lil	h,(ix+1)		; bits 15:8
04FC7A AF                  A   119    			xor		a				; clears A' & F' sign bits
04FC7B D9                  A   120    			exx
04FC7C AF                  A   121    			xor		a
04FC7D 5BDD6E02            A   122    			ld.lil	l,(ix+2)		; bits 23:16
04FC81 67                  A   123    			ld		h,a				; bits 31:24
04FC82 4F                  A   124    			ld		c,a				; indicate integer result
04FC83 C9                  A   125    			ret
                           A   126    
04FC84                     A   127    emfG32AI: ; Get 32-bit item from array
                           A   128    ; Usage: !emdSA% = arrayaddress: !emdAI% = array index: var%=USR(emfG32AI%) 
04FC84 5BCD A0 FE 04       A   129    			call.lil	src_index32
04FC89                     A   130    emfG32: ; Get 32-bit value
                           A   131    ; Usage: !emdSA% = sourceaddress: var%=USR(emfG32%)
04FC89 5BDD2A00 FC04       A   132    			ld.lil	ix,(emdSA)
04FC8F 5BDD6E00            A   133    			ld.lil	l,(ix)			; bits 7:0
04FC93 5BDD6601            A   134    			ld.lil	h,(ix+1)		; bits 15:8
04FC97 AF                  A   135    			xor		a				; clears A' & F' sign bits
04FC98 D9                  A   136    			exx
04FC99 AF                  A   137    			xor		a
04FC9A 5BDD6E02            A   138    			ld.lil	l,(ix+2)		; bits 23:16
04FC9E 5BDD6603            A   139    			ld.lil	h,(ix+3)		; bits 31:24
04FCA2 4F                  A   140    			ld		c,a				; indicate integer result
04FCA3 C9                  A   141    			ret
                           A   142    
04FCA4                     A   143    empGSAI: ; Get String (0..255 characters) item from array
                           A   144    ; Usage: !emdSA% = arrayaddress: !emdIS% = itemsize:
                           A   145    ;        !emdAI% = array index: CALL empGSAI%: var$ = $emdVS%
04FCA4 5BCD E6 FE 04       A   146    			call.lil	src_index_s
04FCA9                     A   147    empGS: ; Get String (0..255 characters)
                           A   148    ; Usage: !emdSA% = sourceaddress: CALL empGS%: var$=$emdVS%
04FCA9 5BDD2A00 FC04       A   149    			ld.lil	ix,(emdSA)
04FCAF 5BFD2100 FB04       A   150    			ld.lil	iy,emdVS
04FCB5 0600                A   151    			ld		b,0
04FCB7                     A   152    loop2:
04FCB7 5BDD7E00            A   153    			ld.lil	a,(ix)
04FCBB 5BFD7700            A   154    			ld.lil	(iy),a
04FCBF FE0D                A   155    			cp		a,0DH			; check for terminator
04FCC1 28 09               A   156    			jr		z,done2
04FCC3 49DD23              A   157    			inc.l	ix
04FCC6 49FD23              A   158    			inc.l	iy
04FCC9 05                  A   159    			dec		b
04FCCA 20 EB               A   160    			jr		nz,loop2
04FCCC C9                  A   161    done2:		ret
                           A   162    
04FCCD                     A   163    empGFAI: ; Get Float (40 bits) item from array
                           A   164    ; Usage: !emdSA% = arrayaddress: !emdAI% = array index: CALL empGFAI%,floatvariable
04FCCD DDE5                A   165    			push	ix
04FCCF 5BCD 9B FE 04       A   166    			call.lil	src_index_f
04FCD4 DDE1                A   167    			pop		ix
04FCD6                     A   168    empGF: ; Get Float (40 bits)
                           A   169    ; Usage: !emdSA% = sourceaddress: CALL empGF%,floatvariable
04FCD6 DD7E00              A   170    			ld		a,(ix)		; get # of parameters
04FCD9 FE01                A   171    			cp		a,1			; is there exactly 1 parameter?
04FCDB 20 21               A   172    			jr		nz,skip		; go if no
04FCDD DD7E01              A   173    			ld		a,(ix+1)	; get parameter type code
04FCE0 FE05                A   174    			cp		a,5			; is it a "real" (float)?
04FCE2 20 1A               A   175    			jr		nz,skip		; go if no
04FCE4 DD3102              A   176    			ld		iy,(ix+2)	; get address of the parameter variable
04FCE7 5BDD2A00 FC04       A   177    			ld.lil	ix,(emdSA)	; get stored float source address
04FCED 0605                A   178    			ld		b,5			; # of bytes to copy
04FCEF                     A   179    loop6:
04FCEF 5BDD7E00            A   180    			ld.lil	a,(ix)		; get src byte
04FCF3 FD7700              A   181    			ld		(iy),a		; store dst byte
04FCF6 49DD23              A   182    			inc.l	ix			; inc src ptr
04FCF9 FD23                A   183    			inc		iy			; inc dst ptr
04FCFB 05                  A   184    			dec		b			; dec count
04FCFC 20 F1               A   185    			jr		nz,loop6	; back if more to copy
04FCFE                     A   186    skip:
04FCFE C9                  A   187    			ret
                           A   188    
04FCFF                     A   189    empP8AI: ; Put 8-bit item into array
                           A   190    ; Usage: !emdDA% = arrayaddress: !emdAI% = array index: !emdV8% = value: CALL empP8AI%
                           A   191    ; Or:    !emdDA% = arrayaddress: !emdAI% = array index: ?emdV8% = value: CALL empP8AI%
04FCFF 5BCD 93 FE 04       A   192    			call.lil	dst_index8
04FD04                     A   193    empP8: ; Put 8-bit value
                           A   194    ; Usage: !emdDA% = destinationaddress: !emdV8% = value: CALL empP8%
                           A   195    ; Or:    !emdDA% = destinationaddress: ?emdV8% = value: CALL empP8%
04FD04 5BDD2100 FB04       A   196    			ld.lil	ix,emdV8
04FD0A 5BFD2A04 FC04       A   197    			ld.lil	iy,(emdDA)
04FD10 5BDD7E00            A   198    			ld.lil	a,(ix)
04FD14 5BFD7700            A   199    			ld.lil	(iy),a
04FD18 C9                  A   200    			ret
                           A   201    
04FD19                     A   202    empP16AI: ; Put 16-bit item into array
                           A   203    ; Usage: !emdDA% = arrayaddress: !emdAI% = array index: !emdV16% = value: CALL empP16AI
04FD19 5BCD 8E FE 04       A   204    			call.lil	dst_index16
04FD1E                     A   205    empP16: ; Put 16-bit value
                           A   206    ; Usage: !emdDA% = destinationaddress: !emdV16% = value: CALL empP16%
04FD1E 5BDD2100 FB04       A   207    			ld.lil	ix,emdV16
04FD24 5BFD2A04 FC04       A   208    			ld.lil	iy,(emdDA)
04FD2A 5BDD7E00            A   209    			ld.lil	a,(ix)
04FD2E 5BFD7700            A   210    			ld.lil	(iy),a
04FD32 5BDD7E01            A   211    			ld.lil	a,(ix+1)
04FD36 5BFD7701            A   212    			ld.lil	(iy+1),a
04FD3A C9                  A   213    			ret
                           A   214    
04FD3B                     A   215    empP24AI: ; Put 24-bit item into array
                           A   216    ; Usage: !emdDA% = arrayaddress: !emdAI% = array index: !emdV24% = value: CALL empP24AI
04FD3B 5BCD 89 FE 04       A   217    			call.lil	dst_index24
04FD40                     A   218    empP24: ; Put 24-bit value
                           A   219    ; Usage: !emdDA% = destinationaddress: !emdV24% = value: CALL empP24%
04FD40 5BDD2100 FB04       A   220    			ld.lil	ix,emdV24
04FD46 5BFD2A04 FC04       A   221    			ld.lil	iy,(emdDA)
04FD4C 5BDD1700            A   222    			ld.lil	de,(ix)
04FD50 5BFD1F00            A   223    			ld.lil	(iy),de
04FD54 C9                  A   224    			ret
                           A   225    
04FD55                     A   226    empP32AI: ; Put 32-bit item into array
                           A   227    ; Usage: !emdDA% = arrayaddress: !emdAI% = array index: !emdV32% = value: CALL empP32AI
04FD55 5BCD 84 FE 04       A   228    			call.lil	dst_index32
04FD5A                     A   229    empP32: ; Put 32-bit value
                           A   230    ; Usage: !emdDA% = destinationaddress: !emdV32% = value: CALL empP32%
04FD5A 5BDD2100 FB04       A   231    			ld.lil	ix,emdV32
04FD60 5BFD2A04 FC04       A   232    			ld.lil	iy,(emdDA)
04FD66 5BDD1700            A   233    			ld.lil	de,(ix)
04FD6A 5BFD1F00            A   234    			ld.lil	(iy),de
04FD6E 5BDD7E03            A   235    			ld.lil	a,(ix+3)
04FD72 5BFD7703            A   236    			ld.lil	(iy+3),a
04FD76 C9                  A   237    			ret
                           A   238    
04FD77                     A   239    empPSAI: ; Put String (0..255 characters) item into array
                           A   240    ; Usage: !emdDA% = arrayaddress: !emdIS% = itemsize:
                           A   241    ;        !emdAI% = array index: $emdVS% = stringvalue: CALL empPSAI%
04FD77 5BCD DE FE 04       A   242    			call.lil	dst_index_s
04FD7C                     A   243    empPS: ; Put String (0..255 characters)
                           A   244    ; Usage: !emdDA% = destinationaddress: !emdVS% = stringvalue: CALL empPS%
04FD7C 5BDD2100 FB04       A   245    			ld.lil	ix,emdVS
04FD82 5BFD2A04 FC04       A   246    			ld.lil	iy,(emdDA)
04FD88 0600                A   247    			ld		b,0
04FD8A                     A   248    loop3:
04FD8A 5BDD7E00            A   249    			ld.lil	a,(ix)
04FD8E 5BFD7700            A   250    			ld.lil	(iy),a
04FD92 FE0D                A   251    			cp		a,0DH		; check for terminator
04FD94 28 09               A   252    			jr		z,done3
04FD96 49DD23              A   253    			inc.l	ix
04FD99 49FD23              A   254    			inc.l	iy
04FD9C 05                  A   255    			dec		b
04FD9D 20 EB               A   256    			jr		nz,loop3
04FD9F C9                  A   257    done3:		ret
                           A   258    
04FDA0                     A   259    empPFAI: ; Put Float (40 bits) item into array
                           A   260    ; Usage: !emdDA% = arrayaddress: !emdAI% = array index: CALL empPFAI%,floatvariable
04FDA0 DDE5                A   261    			push	ix
04FDA2 5BCD 7F FE 04       A   262    			call.lil	dst_index_f
04FDA7 DDE1                A   263    			pop		ix
04FDA9                     A   264    empPF: ; Put Float (40 bits)
                           A   265    ; Usage: !emdDA% = destinationaddress: CALL empPF%,floatvariable
04FDA9 DD7E00              A   266    			ld		a,(ix)		; get # of parameters
04FDAC FE01                A   267    			cp		a,1			; is there exactly 1 parameter?
04FDAE 20 21               A   268    			jr		nz,skip2	; go if no
04FDB0 DD7E01              A   269    			ld		a,(ix+1)	; get parameter type code
04FDB3 FE05                A   270    			cp		a,5			; is it a "real" (float)?
04FDB5 20 1A               A   271    			jr		nz,skip2	; go if no
04FDB7 DD3702              A   272    			ld		ix,(ix+2)	; get address of the parameter variable
04FDBA 5BFD2A04 FC04       A   273    			ld.lil	iy,(emdDA)	; get stored float destination address
04FDC0 0605                A   274    			ld		b,5			; # of bytes to copy
04FDC2                     A   275    loop7:
04FDC2 DD7E00              A   276    			ld		a,(ix)		; get src byte
04FDC5 5BFD7700            A   277    			ld.lil	(iy),a		; store dst byte
04FDC9 DD23                A   278    			inc		ix			; inc src ptr
04FDCB 49FD23              A   279    			inc.l	iy			; inc dst ptr
04FDCE 05                  A   280    			dec		b			; dec count
04FDCF 20 F1               A   281    			jr		nz,loop7	; back if more to copy
04FDD1                     A   282    skip2:
04FDD1 C9                  A   283    			ret
                           A   284    
04FDD2                     A   285    empCMBI:; Copy memory block by incrementing
                           A   286    ; Usage: !emdSA% = sourceaddress: !emdDA% = destinationaddress: !emdRC% = repeatcount: 
04FDD2 5B2A00FC 04         A   287    			ld.lil	hl,(emdSA)
04FDD7 5BED5B04 FC04       A   288    			ld.lil	de,(emdDA)
04FDDD 5BED4B10 FC04       A   289    			ld.lil	bc,(emdRC)
04FDE3 5BEDB0              A   290    			ldir.lil
04FDE6 C9                  A   291    			ret
                           A   292    
04FDE7                     A   293    empCMBD:; Copy memory block by decrementing
                           A   294    ; Usage: !emdSA% = sourceaddress: !emdDA% = destinationaddress: !emdRC% = repeatcount: 
04FDE7 5B2A00FC 04         A   295    			ld.lil	hl,(emdSA)
04FDEC 5BED5B04 FC04       A   296    			ld.lil	de,(emdDA)
04FDF2 5BED4B10 FC04       A   297    			ld.lil	bc,(emdRC)
04FDF8 492B                A   298    			dec.l	hl
04FDFA 491B                A   299    			dec.l	de
04FDFC 5BEDB8              A   300    			lddr.lil
04FDFF 4923                A   301    			inc.l	hl
04FE01 4913                A   302    			inc.l	de
04FE03 C9                  A   303    			ret
                           A   304    
04FE04                     A   305    empXMB: ; Exchange (swap) memory blocks
                           A   306    ; Usage: !emdSA% = sourceaddress: !emdDA% = destinationaddress: !emdRC% = repeatcount: 
04FE04 5BDD2A00 FC04       A   307    			ld.lil	ix,(emdSA)
04FE0A 5B2A04FC 04         A   308    			ld.lil	hl,(emdDA)
04FE0F 5BFD2110 FC04       A   309    			ld.lil	iy,emdRC
04FE15 FD4602              A   310    			ld		b,(iy+2)
04FE18 FD5601              A   311    			ld		d,(iy+1)
04FE1B FD5E00              A   312    			ld		e,(iy)
04FE1E                     A   313    loop4:		
04FE1E 5BDD4E00            A   314    			ld.lil	c,(ix)
04FE22 5B7E                A   315    			ld.lil	a,(hl)
04FE24 5B71                A   316    			ld.lil	(hl),c
04FE26 5BDD7700            A   317    			ld.lil  (ix),a
04FE2A 49DD23              A   318    			inc.l	ix
04FE2D 4923                A   319    			inc.l	hl
                           A   320    
04FE2F 7B                  A   321    			ld		a,e
04FE30 D601                A   322    			sub		a,1
04FE32 5F                  A   323    			ld		e,a
                           A   324    			
04FE33 7A                  A   325    			ld		a,d
04FE34 DE00                A   326    			sbc		a,0
04FE36 57                  A   327    			ld		d,a
                           A   328    			
04FE37 78                  A   329    			ld		a,b
04FE38 DE00                A   330    			sbc		a,0
04FE3A 47                  A   331    			ld		b,a
                           A   332    
04FE3B B2                  A   333    			or		a,d
04FE3C B3                  A   334    			or		a,e
04FE3D 20 DF               A   335    			jr		nz,loop4
                           A   336    
04FE3F 5BDD2200 FC04       A   337    			ld.lil	(emdSA),ix
04FE45 5B2204FC 04         A   338    			ld.lil	(emdDA),hl
04FE4A C9                  A   339    			ret
                           A   340    
04FE4B                     A   341    empZMB: ; Zero memory block
                           A   342    ; Usage: !emdDA% = destinationaddress: !emdRC% = repeatcount: CALL empZMB%
04FE4B 5BDD2A04 FC04       A   343    			ld.lil	ix,(emdDA)
04FE51 5BFD2110 FC04       A   344    			ld.lil	iy,emdRC
04FE57 FD4602              A   345    			ld		b,(iy+2)
04FE5A FD5601              A   346    			ld		d,(iy+1)
04FE5D FD5E00              A   347    			ld		e,(iy)
04FE60                     A   348    loop5:
04FE60 AF                  A   349    			xor		a
04FE61 5BDD7700            A   350    			ld.lil	(ix),a
04FE65 49DD23              A   351    			inc.l	ix
                           A   352    
04FE68 7B                  A   353    			ld		a,e
04FE69 D601                A   354    			sub		a,1
04FE6B 5F                  A   355    			ld		e,a
                           A   356    			
04FE6C 7A                  A   357    			ld		a,d
04FE6D DE00                A   358    			sbc		a,0
04FE6F 57                  A   359    			ld		d,a
                           A   360    			
04FE70 78                  A   361    			ld		a,b
04FE71 DE00                A   362    			sbc		a,0
04FE73 47                  A   363    			ld		b,a
                           A   364    
04FE74 B2                  A   365    			or		a,d
04FE75 B3                  A   366    			or		a,e
04FE76 20 E8               A   367    			jr		nz,loop5
                           A   368    
04FE78 5BDD2204 FC04       A   369    			ld.lil	(emdDA),ix
04FE7E C9                  A   370    			ret
                           A   371    
04FE7F                     A   372    dst_index_f: ; Add 5x array index to the destination address
04FE7F 5BCD 93 FE 04       A   373    			call.lil	dst_index8
04FE84                     A   374    dst_index32: ; Add 4x array index to the destination address
04FE84 5BCD 93 FE 04       A   375    			call.lil	dst_index8
04FE89                     A   376    dst_index24: ; Add 3x array index to the destination address
04FE89 5BCD 93 FE 04       A   377    			call.lil	dst_index8
04FE8E                     A   378    dst_index16: ; Add 2x array index to the destination address
04FE8E 5BCD 93 FE 04       A   379    			call.lil	dst_index8
04FE93                     A   380    dst_index8: ; Add 1x array index to the destination address
04FE93 5BDD2104 FC04       A   381    			ld.lil	ix,emdDA
04FE99 18 1A               A   382    			jr		add_to_addr
04FE9B                     A   383    src_index_f: ; Add 5x array index to the source address
04FE9B 5BCD AF FE 04       A   384    			call.lil	src_index8
04FEA0                     A   385    src_index32: ; Add 4x array index to the source address
04FEA0 5BCD AF FE 04       A   386    			call.lil	src_index8
04FEA5                     A   387    src_index24: ; Add 3x array index to the source address
04FEA5 5BCD AF FE 04       A   388    			call.lil	src_index8
04FEAA                     A   389    src_index16: ; Add 2x array index to the source address
04FEAA 5BCD AF FE 04       A   390    			call.lil	src_index8
04FEAF                     A   391    src_index8: ; Add 1x array index to the source address
04FEAF 5BDD2100 FC04       A   392    			ld.lil	ix,emdSA
04FEB5                     A   393    add_to_addr:
04FEB5 5B3A08FC 04         A   394    			ld.lil	a,(emdAI)
04FEBA 5BDD8600            A   395    			add.lil	a,(ix)
04FEBE 5BDD7700            A   396    			ld.lil	(ix),a
04FEC2 5B3A09FC 04         A   397    			ld.lil	a,(emdAI+1)
04FEC7 5BDD8E01            A   398    			adc.lil	a,(ix+1)
04FECB 5BDD7701            A   399    			ld.lil	(ix+1),a
04FECF 5B3A0AFC 04         A   400    			ld.lil	a,(emdAI+2)
04FED4 5BDD8E02            A   401    			adc.lil	a,(ix+2)
04FED8 5BDD7702            A   402    			ld.lil	(ix+2),a
04FEDC 49C9                A   403    			ret.l
                           A   404    
04FEDE                     A   405    dst_index_s: ; Add (item size)*(array index) to the destination address
04FEDE 5BDD2104 FC04       A   406    			ld.lil	ix,emdDA
04FEE4 18 06               A   407    			jr		add_to_addr2
04FEE6                     A   408    src_index_s: ; Add (item size)*(array index) to the source address
04FEE6 5BDD2100 FC04       A   409    			ld.lil	ix,emdSA
                           A   410    ; The array index is limited to the range 0 to 65535 (&FFFF). The array item size
                           A   411    ; is limited to the range 1 to 256. In order to compute the byte offset from the
                           A   412    ; start of the array to a particular array item, we do a 16-bit by 16-bit multiplicatio
                           A   413    ; and use the lower 24-bits of the resulting product. The MLT instruction can only
                           A   414    ; multiply 8 bits by 8 bits, so we must use it several times.
                           A   415    ;
                           A   416    ; array index: [AIH][AIL]
                           A   417    ; item size:   [ISH][ISL]
                           A   418    ; item offset: AIL*ISL + AIH*ISL*100H + ISH*AIL*100H + AIH*ISH*10000H
                           A   419    ;
04FEEC                     A   420    add_to_addr2:
04FEEC DDE5                A   421    			push	ix				; save location of address parameter
04FEEE 5BDD2108 FC04       A   422    			ld.lil	ix,emdAI
04FEF4 5BFD210C FC04       A   423    			ld.lil	iy,emdIS
                           A   424    
04FEFA 5BDD4601            A   425    			ld.lil	b,(ix+1)		; AIH
04FEFE 5BFD4E01            A   426    			ld.lil	c,(iy+1)		; ISH
04FF02 ED4C                A   427    			mlt		bc				; AIH*ISH (*10000H)
04FF04 D9                  A   428    			exx
                           A   429    
04FF05 5BDD4600            A   430    			ld.lil	b,(ix)			; AIL
04FF09 5BFD4E00            A   431    			ld.lil	c,(iy)			; ISL
04FF0D ED4C                A   432    			mlt		bc				; AIL*ISL (*1H)
                           A   433    
04FF0F 5BDD5601            A   434    			ld.lil	d,(ix+1)		; AIH
04FF13 5BFD5E00            A   435    			ld.lil	e,(iy)			; ISL
04FF17 ED5C                A   436    			mlt		de				; AIH*ISL (*100H)
                           A   437    
04FF19 5BDD6600            A   438    			ld.lil	h,(ix)			; AIL
04FF1D 5BFD6E01            A   439    			ld.lil	l,(iy+1)		; ISH
04FF21 ED6C                A   440    			mlt		hl				; AIL*ISH (*100H)
                           A   441    			
04FF23 DDE1                A   442    			pop		ix				; restore location of address parameter
                           A   443    
04FF25 79                  A   444    			ld		a,c				; AIL*ISL (L)
04FF26 5BDD8600            A   445    			add.lil	a,(ix)			; add address (bits 7:0)
04FF2A 5BDD7700            A   446    			ld.lil	(ix),a			; save new address (bits 7:0)
                           A   447    			
04FF2E 78                  A   448    			ld		a,b				; AIL*ISL (H)
04FF2F 8B                  A   449    			adc		a,e				; AIH*ISL (L)
04FF30 8D                  A   450    			adc		a,l				; AIL*ISH (L)
04FF31 5BDD8E01            A   451    			adc.lil	a,(ix+1)		; add address (bits 15:8)
04FF35 5BDD7701            A   452    			ld.lil	(ix+1),a		; save new address (bits 15:8)
                           A   453    
04FF39 7A                  A   454    			ld		a,d				; AIH*ISL (H)
04FF3A 8C                  A   455    			adc		a,h				; AIL*ISH (H)
04FF3B D9                  A   456    			exx
04FF3C 89                  A   457    			adc		a,c				; AIH*ISH (L)
04FF3D 5BDD8E02            A   458    			adc.lil	a,(ix+2)		; add address (bits 23:16)
04FF41 5BDD7702            A   459    			ld.lil	(ix+2),a		; save new address (bits 23:16)
04FF45 49C9                A   460    			ret.l


Errors: 0
Warnings: 0
Lines Assembled: 461

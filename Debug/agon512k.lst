Zilog eZ80 Macro Assembler Version 4.3 (19073001)                                   18-Apr-23     00:58:28     page:   1


PC     Object              I  Line    Source 
                           A     1    ; File:		agon512k.asm
                           A     2    ; Purpose:	Use Agon 512KB external RAM in BASIC
                           A     3    ; Copyright (C) 2023 by Curtis Whitley
                           A     4    ;
                           A     5    ; MIT License
                           A     6    ;
                           A     7    ; Permission is hereby granted, free of charge, to any person obtaining a copy
                           A     8    ; of this software and associated documentation files (the "Software"), to deal
                           A     9    ; in the Software without restriction, including without limitation the rights
                           A    10    ; to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
                           A    11    ; copies of the Software, and to permit persons to whom the Software is
                           A    12    ; furnished to do so, subject to the following conditions:
                           A    13    ;
                           A    14    ; The above copyright notice and this permission notice shall be included in all
                           A    15    ; copies or substantial portions of the Software.
                           A    16    ;
                           A    17    ; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
                           A    18    ; IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
                           A    19    ; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
                           A    20    ; AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
                           A    21    ; LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
                           A    22    ; OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
                           A    23    ; SOFTWARE.
                           A    24    
                           A    25    
                           A    26    		XDEF	src_address
                           A    27    		XDEF	dst_address
                           A    28    		XDEF	block_size
                           A    29    		XDEF	copy_ram
                           A    30    		XDEF	clear_ram
                           A    31    
                           A    32    		DEFINE	MY_CODE_SEG, ORG=%FEB0
                           A    33    		SEGMENT	MY_CODE_SEG
                           A    34    		ALIGN	4
                           A    35    
                           A    36    		.ASSUME	ADL = 0
                           A    37    
                           A    38    
00FEB0 000000              A    39    src_address:	DW24	0		; source location within external RAM
00FEB3 00                  A    40    				DB		0		; MSB of 32-bit value, ignored
00FEB4 000000              A    41    dst_address:	DW24	0		; destination location within external RAM
00FEB7 00                  A    42    				DB		0		; MSB of 32-bit value, ignored
00FEB8 000000              A    43    block_size:		DW24	0		; number of bytes to copy from source to destination
00FEBB 00                  A    44    				DB		0		; MSB of 32-bit value, ignored
00FEBC 00                  A    45    byte_value:		DB		0		; byte value used to fill memory
00FEBD 000000              A    46    				DW24    0       ; Upper 24 bits of 32-bit value, ignored.
                           A    47    
                           A    48    ; Copy a block of RAM from the source address to the destination address.
                           A    49    ;
00FEC0                     A    50    copy_ram:
00FEC0 52CD C6 FE 00       A    51    		call.sil copy_adl		; use ADL mode
00FEC5 C9                  A    52    		ret
                           A    53    		.ASSUME ADL = 1
00FEC6                     A    54    copy_adl:
00FEC6 2A B0 FE 00         A    55    		ld		hl, (src_address) ; get the source address
00FECA ED5B B4 FE 00       A    56    		ld		de, (dst_address) ; get the destination address
00FECF ED4B B8 FE 00       A    57    		ld		bc, (block_size) ; get the block size to copy
00FED4 EDB0                A    58    		ldir					; copy the entire block
00FED6 5BC9                A    59    		ret.l
                           A    60    
                           A    61    		.ASSUME ADL = 0
                           A    62    ; Clear a block of RAM at the destination address.
                           A    63    ;
00FED8                     A    64    clear_ram:
00FED8 AF                  A    65    		xor		a				; load zero for clearing
00FED9 18 03               A    66    		jr		fill			; perform the fill in ADL mode
                           A    67    
                           A    68    ; Fill a block of RAM at the destination address with a given byte value.
                           A    69    ;
00FEDB                     A    70    fill_ram:
00FEDB 3A BC FE            A    71    		ld		a, (byte_value) ; load given value for filling memory
00FEDE                     A    72    fill:
00FEDE 52CD E4 FE 00       A    73    		call.sil fill_adl		; use ADL mode
00FEE3 C9                  A    74    		ret
                           A    75    
                           A    76    		.ASSUME	ADL = 1
00FEE4                     A    77    fill_adl:
00FEE4 ED5B B4 FE 00       A    78    		ld		de, (dst_address) ; get the destination address
00FEE9 ED4B B8 FE 00       A    79    		ld		bc, (block_size) ; get the block size to fill
00FEEE                     A    80    fill_loop:
00FEEE 12                  A    81    		ld		(de), a			; clear one byte
00FEEF 13                  A    82    		inc		de				; advance pointer
00FEF0 0B                  A    83    		dec		bc				; decrease byte count
00FEF1 C2 EE FE 00         A    84    		jp		nz,fill_loop	; back if more to fill
00FEF5 5BC9                A    85    		ret.l


Errors: 0
Warnings: 0
Lines Assembled: 86

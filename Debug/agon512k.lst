Zilog eZ80 Macro Assembler Version 4.3 (19073001)                                   17-Apr-23     05:27:44     page:   1


PC     Object              I  Line    Source 
                           A     1    ; File:		agon512k.asm
                           A     2    ; Purpose:	Use Agon 512KB external RAM in BASIC
                           A     3    ; Copyright (C) 2023 by Curtis Whitley
                           A     4    ;
                           A     5    ; MIT License
                           A     6    ;
                           A     7    ; Permission is hereby granted, free of charge, to any person obtaining a copy
                           A     8    ; of this software and associated documentation files (the "Software"), to deal
                           A     9    ; in the Software without restriction, including without limitation the rights
                           A    10    ; to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
                           A    11    ; copies of the Software, and to permit persons to whom the Software is
                           A    12    ; furnished to do so, subject to the following conditions:
                           A    13    ;
                           A    14    ; The above copyright notice and this permission notice shall be included in all
                           A    15    ; copies or substantial portions of the Software.
                           A    16    ;
                           A    17    ; THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
                           A    18    ; IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
                           A    19    ; FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
                           A    20    ; AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
                           A    21    ; LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
                           A    22    ; OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
                           A    23    ; SOFTWARE.
                           A    24    
                           A    25    
                           A    26    		XDEF	src_address
                           A    27    		XDEF	dst_address
                           A    28    		XDEF	block_size
                           A    29    		XDEF	copy_ram
                           A    30    		XDEF	clear_ram
                           A    31    
                           A    32    ; BASIC uses HIMEM value of &FF00, so we choose enough room below that.
                           A    33    		DEFINE	HIMEM_SEG, ORG=%FEA0
                           A    34    		SEGMENT	HIMEM_SEG
                           A    35    		ALIGN	4
                           A    36    
                           A    37    		.ASSUME	ADL = 0
                           A    38    
                           A    39    
00FEA0 000000              A    40    src_address:	DW24	0		; source location within external RAM
00FEA3 00                  A    41    				DB		0		; MSB of 32-bit value, ignored
00FEA4 000000              A    42    dst_address:	DW24	0		; destination location within external RAM
00FEA7 00                  A    43    				DB		0		; MSB of 32-bit value, ignored
00FEA8 000000              A    44    block_size:		DW24	0		; number of bytes to copy from source to destination
00FEAB 00                  A    45    				DB		0		; MSB of 32-bit value, ignored
00FEAC 00                  A    46    byte_value:		DB		0		; byte value used to fill memory
00FEAD 000000              A    47    				DW24    0       ; Upper 24 bits of 32-bit value, ignored.
                           A    48    
                           A    49    ; Copy a block of RAM from the source address to the destination address.
                           A    50    ;
                           A    51    ; This routine is called in Z80 (non-ADL) mode. It changes to ADL mode to operate.
                           A    52    ;
00FEB0                     A    53    copy_ram:
00FEB0 ED7D                A    54    		stmix					; enable mixed mode operation
00FEB2 52CD D3 FE 00       A    55    		call.sil	copy_adl	; perform the copy in ADL mode
00FEB7 ED7E                A    56    		rsmix					; disable mixed mode operation
00FEB9 C9                  A    57    		ret
                           A    58    
                           A    59    ; Clear a block of RAM at the destination address.
                           A    60    ;
                           A    61    ; This routine is called in Z80 (non-ADL) mode. It changes to ADL mode to operate.
                           A    62    ;
00FEBA                     A    63    clear_ram:
00FEBA ED7D                A    64    		stmix					; enable mixed mode operation
00FEBC 3E00                A    65    		ld			a, 0		; load zero for clearing
00FEBE 52CD E5 FE 00       A    66    		call.sil	fill_adl	; perform the fill in ADL mode
00FEC3 ED7E                A    67    		rsmix					; disable mixed mode operation
00FEC5 C9                  A    68    		ret
                           A    69    
                           A    70    ; Fill a block of RAM at the destination address with a given byte value.
                           A    71    ;
                           A    72    ; This routine is called in Z80 (non-ADL) mode. It changes to ADL mode to operate.
                           A    73    ;
00FEC6                     A    74    fill_ram:
00FEC6 ED7D                A    75    		stmix					; enable mixed mode operation
00FEC8 3A AC FE            A    76    		ld			a, (byte_value) ; load given value for filling memory
00FECB 52CD E5 FE 00       A    77    		call.sil	fill_adl	; perform the clear in ADL mode
00FED0 ED7E                A    78    		rsmix					; disable mixed mode operation
00FED2 C9                  A    79    		ret
                           A    80    
                           A    81    		.ASSUME ADL = 1
                           A    82    
                           A    83    ; Copy a block of RAM from the source address to the destination address.
                           A    84    ;
                           A    85    ; This routine runs in ADL mode.
                           A    86    ;
00FED3                     A    87    copy_adl:
00FED3 2A A0 FE 00         A    88    		ld		hl, (src_address) ; get the source address
00FED7 ED5B A4 FE 00       A    89    		ld		de, (dst_address) ; get the destination address
00FEDC ED4B A8 FE 00       A    90    		ld		bc, (block_size) ; get the block size to copy
00FEE1 EDB0                A    91    		ldir					; copy the entire block
00FEE3 5BC9                A    92    		ret.l
                           A    93    
                           A    94    ; Fill a block of RAM at the destination address with a given byte value.
                           A    95    ;
                           A    96    ; This routine runs in ADL mode. The byte value is in the A register.
                           A    97    ;
00FEE5                     A    98    fill_adl:
00FEE5 ED5B A4 FE 00       A    99    		ld		de, (dst_address) ; get the destination address
00FEEA ED4B A8 FE 00       A   100    		ld		bc, (block_size) ; get the block size to fill
00FEEF                     A   101    loop:
00FEEF 12                  A   102    		ld		(de), a			; clear one byte
00FEF0 13                  A   103    		inc		de				; advance pointer
00FEF1 0B                  A   104    		dec		bc				; decrease byte count
00FEF2 C2 EF FE 00         A   105    		jp		nz,loop			; back if more to fill
00FEF6 5BC9                A   106    		ret.l


Errors: 0
Warnings: 0
Lines Assembled: 107
